// Combined mouse + keyboard demonstration
//
// This example shows how to use both virtual pointer and virtual keyboard
// together to create a complete input automation scenario.
//
// Scenario: Automate opening a text editor and typing content
//
// Run with: go run examples/combined_demo.go
package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/bnema/wayland-virtual-input-go/virtual_keyboard"
	"github.com/bnema/wayland-virtual-input-go/virtual_pointer"
)

func main() {
	fmt.Println("Combined Mouse + Keyboard Demo")
	fmt.Println("==============================")
	fmt.Println("This demo will simulate opening a text application and typing content.")
	fmt.Println()
	
	ctx := context.Background()
	
	// Create virtual pointer
	fmt.Print("Setting up virtual pointer... ")
	mouseManager, err := virtual_pointer.NewVirtualPointerManager(ctx)
	if err != nil {
		log.Fatalf("FAILED: %v", err)
	}
	defer mouseManager.Close()
	
	mouse, err := mouseManager.CreatePointer()
	if err != nil {
		log.Fatalf("FAILED: %v", err)
	}
	defer mouse.Close()
	fmt.Println("OK")
	
	// Create virtual keyboard
	fmt.Print("Setting up virtual keyboard... ")
	keyboardManager, err := virtual_keyboard.NewVirtualKeyboardManager(ctx)
	if err != nil {
		log.Fatalf("FAILED: %v", err)
	}
	defer keyboardManager.Close()
	
	keyboard, err := keyboardManager.CreateKeyboard()
	if err != nil {
		log.Fatalf("FAILED: %v", err)
	}
	defer keyboard.Close()
	fmt.Println("OK")
	
	fmt.Println("\nDemo scenario: Opening text editor and typing a document")
	fmt.Println("========================================================")
	
	countdown(5)
	
	// Step 1: Simulate right-click to open context menu
	fmt.Println("\n→ Step 1: Right-clicking to open context menu")
	err = mouse.RightClick()
	if err != nil {
		log.Printf("Right click failed: %v", err)
	}
	time.Sleep(1 * time.Second)
	
	// Step 2: Move mouse to select "Open Terminal" or similar
	fmt.Println("→ Step 2: Moving mouse to menu option")
	mouse.MoveRelative(50, 30) // Move to approximate menu item location
	time.Sleep(500 * time.Millisecond)
	
	// Step 3: Click on menu item
	fmt.Println("→ Step 3: Clicking menu item")
	mouse.LeftClick()
	time.Sleep(2 * time.Second) // Wait for application to open
	
	// Step 4: Type a command to open text editor
	fmt.Println("→ Step 4: Typing command to open text editor")
	keyboard.TypeString("nano demo.txt")
	time.Sleep(500 * time.Millisecond)
	keyboard.TypeKey(virtual_keyboard.KEY_ENTER)
	time.Sleep(1500 * time.Millisecond) // Wait for editor to open
	
	// Step 5: Type document content
	fmt.Println("→ Step 5: Writing document content")
	
	content := []string{
		"Wayland Virtual Input Demo",
		"==========================",
		"",
		"This text was generated by the wayland-virtual-input-go library!",
		"",
		"The library successfully:",
		"- Created virtual pointer and keyboard devices",
		"- Moved the mouse cursor programmatically", 
		"- Performed mouse clicks (left and right)",
		"- Typed text including mixed case and numbers",
		"- Handled special keys like Enter and Space",
		"",
		"All input events were sent directly to the Wayland compositor",
		"using the zwlr_virtual_pointer_v1 and zwp_virtual_keyboard_v1 protocols.",
		"",
		"Date: " + time.Now().Format("2006-01-02 15:04:05"),
	}
	
	for i, line := range content {
		fmt.Printf("   Writing line %d/%d: %s\n", i+1, len(content), line)
		keyboard.TypeString(line)
		keyboard.TypeKey(virtual_keyboard.KEY_ENTER)
		time.Sleep(300 * time.Millisecond) // Slight delay between lines
	}
	
	// Step 6: Save and exit
	fmt.Println("→ Step 6: Saving and exiting editor")
	time.Sleep(1 * time.Second)
	
	// Ctrl+X to exit nano
	keyboard.PressKey(virtual_keyboard.KEY_LEFTCTRL)
	keyboard.PressKey(virtual_keyboard.KEY_X)
	time.Sleep(50 * time.Millisecond)
	keyboard.ReleaseKey(virtual_keyboard.KEY_X)
	keyboard.ReleaseKey(virtual_keyboard.KEY_LEFTCTRL)
	time.Sleep(500 * time.Millisecond)
	
	// Y to confirm save
	keyboard.TypeKey(virtual_keyboard.KEY_Y)
	time.Sleep(500 * time.Millisecond)
	
	// Enter to confirm filename
	keyboard.TypeKey(virtual_keyboard.KEY_ENTER)
	
	fmt.Println("\n✅ Demo completed successfully!")
	fmt.Println("   Check if demo.txt was created with the generated content.")
	fmt.Println("   This demonstrates full integration of mouse and keyboard virtual input.")
}

func countdown(seconds int) {
	fmt.Printf("Starting in: ")
	for i := seconds; i > 0; i-- {
		fmt.Printf("%d ", i)
		time.Sleep(1 * time.Second)
	}
	fmt.Println("GO!")
}